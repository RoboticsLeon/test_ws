// Generated by gencpp from file beacon_gazebo_sim/ReceiverIn.msg
// DO NOT EDIT!


#ifndef BEACON_GAZEBO_SIM_MESSAGE_RECEIVERIN_H
#define BEACON_GAZEBO_SIM_MESSAGE_RECEIVERIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beacon_gazebo_sim
{
template <class ContainerAllocator>
struct ReceiverIn_
{
  typedef ReceiverIn_<ContainerAllocator> Type;

  ReceiverIn_()
    : id()
    , time_stamp()
    , rssi(0.0)
    , m_rssi(0.0)  {
    }
  ReceiverIn_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , time_stamp()
    , rssi(0.0)
    , m_rssi(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef double _rssi_type;
  _rssi_type rssi;

   typedef double _m_rssi_type;
  _m_rssi_type m_rssi;





  typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> const> ConstPtr;

}; // struct ReceiverIn_

typedef ::beacon_gazebo_sim::ReceiverIn_<std::allocator<void> > ReceiverIn;

typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverIn > ReceiverInPtr;
typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverIn const> ReceiverInConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator1> & lhs, const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.rssi == rhs.rssi &&
    lhs.m_rssi == rhs.m_rssi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator1> & lhs, const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beacon_gazebo_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cb78d561031d7e03dfaf8eabce68fe2";
  }

  static const char* value(const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cb78d561031d7e0ULL;
  static const uint64_t static_value2 = 0x3dfaf8eabce68fe2ULL;
};

template<class ContainerAllocator>
struct DataType< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beacon_gazebo_sim/ReceiverIn";
  }

  static const char* value(const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"time time_stamp\n"
"float64 rssi\n"
"float64 m_rssi\n"
"\n"
;
  }

  static const char* value(const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.time_stamp);
      stream.next(m.rssi);
      stream.next(m.m_rssi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReceiverIn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "rssi: ";
    Printer<double>::stream(s, indent + "  ", v.rssi);
    s << indent << "m_rssi: ";
    Printer<double>::stream(s, indent + "  ", v.m_rssi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEACON_GAZEBO_SIM_MESSAGE_RECEIVERIN_H
