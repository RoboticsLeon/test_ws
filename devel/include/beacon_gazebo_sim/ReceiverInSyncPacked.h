// Generated by gencpp from file beacon_gazebo_sim/ReceiverInSyncPacked.msg
// DO NOT EDIT!


#ifndef BEACON_GAZEBO_SIM_MESSAGE_RECEIVERINSYNCPACKED_H
#define BEACON_GAZEBO_SIM_MESSAGE_RECEIVERINSYNCPACKED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <beacon_gazebo_sim/ReceiverIn.h>

namespace beacon_gazebo_sim
{
template <class ContainerAllocator>
struct ReceiverInSyncPacked_
{
  typedef ReceiverInSyncPacked_<ContainerAllocator> Type;

  ReceiverInSyncPacked_()
    : time_stamp()
    , data()  {
    }
  ReceiverInSyncPacked_(const ContainerAllocator& _alloc)
    : time_stamp()
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef std::vector< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> const> ConstPtr;

}; // struct ReceiverInSyncPacked_

typedef ::beacon_gazebo_sim::ReceiverInSyncPacked_<std::allocator<void> > ReceiverInSyncPacked;

typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverInSyncPacked > ReceiverInSyncPackedPtr;
typedef boost::shared_ptr< ::beacon_gazebo_sim::ReceiverInSyncPacked const> ReceiverInSyncPackedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator1> & lhs, const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator1> & lhs, const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beacon_gazebo_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea7c14885d84104c4b0075142703bfe5";
  }

  static const char* value(const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea7c14885d84104cULL;
  static const uint64_t static_value2 = 0x4b0075142703bfe5ULL;
};

template<class ContainerAllocator>
struct DataType< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beacon_gazebo_sim/ReceiverInSyncPacked";
  }

  static const char* value(const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time_stamp\n"
"beacon_gazebo_sim/ReceiverIn[] data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: beacon_gazebo_sim/ReceiverIn\n"
"string id\n"
"time time_stamp\n"
"float64 rssi\n"
"float64 m_rssi\n"
"\n"
;
  }

  static const char* value(const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReceiverInSyncPacked_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beacon_gazebo_sim::ReceiverInSyncPacked_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::beacon_gazebo_sim::ReceiverIn_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEACON_GAZEBO_SIM_MESSAGE_RECEIVERINSYNCPACKED_H
